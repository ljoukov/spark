name: Update Preview Router

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch: {}

jobs:
  upsert:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Map PR -> latest READY preview
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GIT_SHA: ${{ github.sha }}
          HEAD_REF: ${{ github.head_ref }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          EDGE_CONFIG_ID: ${{ secrets.EDGE_CONFIG_ID }}
        shell: bash
        run: |
          node - <<'JS'
          const fetchJson = async (url, init = {}) => {
            const r = await fetch(url, init);
            if (!r.ok) throw new Error(`${init.method || 'GET'} ${url} -> ${r.status} ${await r.text()}`);
            return r.json();
          };

          const {
            PR_NUMBER, GIT_SHA, HEAD_REF,
            VERCEL_TOKEN, VERCEL_TEAM_ID, VERCEL_PROJECT_ID, EDGE_CONFIG_ID
          } = process.env;

          const auth = { Authorization: `Bearer ${VERCEL_TOKEN}` };

          async function findDeployment() {
            const base = new URL('https://api.vercel.com/v6/deployments');
            if (VERCEL_PROJECT_ID) base.searchParams.set('projectId', VERCEL_PROJECT_ID);
            base.searchParams.set('target', 'preview');
            base.searchParams.set('limit', '50');
            if (VERCEL_TEAM_ID) base.searchParams.set('teamId', VERCEL_TEAM_ID);

            const tries = [new URL(base), new URL(base), new URL(base)];
            tries[0].searchParams.set('meta-githubCommitSha', GIT_SHA);
            if (HEAD_REF) tries[1].searchParams.set('meta-githubCommitRef', HEAD_REF);

            for (const u of tries) {
              try {
                const data = await fetchJson(u.toString(), { headers: auth });
                const list = (data.deployments || []).filter(d => d.readyState === 'READY' && d.url);
                let dep =
                  list.find(d => d.meta?.githubCommitSha === GIT_SHA) ||
                  (PR_NUMBER && list.find(d => String(d.meta?.githubPrId || '') === String(PR_NUMBER))) ||
                  (HEAD_REF && list.find(d => d.meta?.githubCommitRef === HEAD_REF)) ||
                  list.sort((a, b) => (b.created || b.createdAt) - (a.created || a.createdAt))[0];
                if (dep) return `https://${dep.url}`;
              } catch (e) {
                // try next
              }
            }
            return null;
          }

          (async () => {
            const dest = await findDeployment();
            if (!dest) throw new Error('Could not find a READY preview deployment for this PR/commit');

            const endpoint = new URL(`https://api.vercel.com/v1/edge-config/${EDGE_CONFIG_ID}/items`);
            if (VERCEL_TEAM_ID) endpoint.searchParams.set('teamId', VERCEL_TEAM_ID);
            const body = { items: [{ operation: 'upsert', key: `pr:${PR_NUMBER}`, value: dest }] };

            await fetchJson(endpoint.toString(), {
              method: 'PATCH',
              headers: { ...auth, 'Content-Type': 'application/json' },
              body: JSON.stringify(body)
            });

            console.log(`âœ… pr:${PR_NUMBER} -> ${dest}`);
          })();
          JS

  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Remove PR mapping on close
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          EDGE_CONFIG_ID: ${{ secrets.EDGE_CONFIG_ID }}
        shell: bash
        run: |
          node - <<'JS'
          const { PR_NUMBER, VERCEL_TOKEN, VERCEL_TEAM_ID, EDGE_CONFIG_ID } = process.env;

          const endpoint = new URL(`https://api.vercel.com/v1/edge-config/${EDGE_CONFIG_ID}/items`);
          if (VERCEL_TEAM_ID) endpoint.searchParams.set('teamId', VERCEL_TEAM_ID);
          const body = { items: [{ operation: 'delete', key: `pr:${PR_NUMBER}` }] };

          fetch(endpoint, {
            method: 'PATCH',
            headers: { Authorization: `Bearer ${VERCEL_TOKEN}`, 'Content-Type': 'application/json' },
            body: JSON.stringify(body)
          }).then(async r => {
            if (!r.ok) throw new Error(`${r.status} ${await r.text()}`);
            console.log(`ðŸ§¹ deleted pr:${PR_NUMBER}`);
          }).catch(e => { console.error(e); process.exit(1); });
          JS
